{"version":3,"file":"vuxtra.js","sources":["../lib/common/options.js","../lib/vuxtraBoot.js"],"sourcesContent":["import _ from 'lodash'\nimport path from 'path'\n\nlet defaultOptionsObj = {\n    'nuxt': {},\n    'socketcluster': {\n        workers: Number(process.env.SOCKETCLUSTER_WORKERS) || 1,\n        brokers: Number(process.env.SOCKETCLUSTER_BROKERS) || 1,\n        port:  Number(process.env.SOCKETCLUSTER_PORT) || 3000,\n        // If your system doesn't support 'uws', you can switch to 'ws' (which is slower but works on older systems).\n        wsEngine: process.env.SOCKETCLUSTER_WS_ENGINE || 'uws',\n        appName: process.env.SOCKETCLUSTER_APP_NAME || null,\n        workerController: __dirname + '/sccWorker.js',\n        brokerController: __dirname + '/sccBroker.js',\n        initController: process.env.SOCKETCLUSTER_INIT_CONTROLLER || null,\n        workerClusterController: process.env.SOCKETCLUSTER_WORKERCLUSTER_CONTROLLER || null,\n        socketChannelLimit: Number(process.env.SOCKETCLUSTER_SOCKET_CHANNEL_LIMIT) || 1000,\n        clusterStateServerHost: process.env.SCC_STATE_SERVER_HOST || null,\n        clusterStateServerPort: process.env.SCC_STATE_SERVER_PORT || null,\n        clusterAuthKey: process.env.SCC_AUTH_KEY || null,\n        clusterInstanceIp: process.env.SCC_INSTANCE_IP || null,\n        clusterInstanceIpFamily: process.env.SCC_INSTANCE_IP_FAMILY || null,\n        clusterStateServerConnectTimeout: Number(process.env.SCC_STATE_SERVER_CONNECT_TIMEOUT) || null,\n        clusterStateServerAckTimeout: Number(process.env.SCC_STATE_SERVER_ACK_TIMEOUT) || null,\n        clusterStateServerReconnectRandomness: Number(process.env.SCC_STATE_SERVER_RECONNECT_RANDOMNESS) || null,\n        crashWorkerOnError: false,\n        // If using nodemon, set this to true, and make sure that environment is 'dev'.\n        killMasterOnSignal: false,\n        environment: process.env.ENV || 'dev'\n    },\n    'vuxtra': {\n        dev: process.env.NODE_ENV !== 'production',\n        debug: undefined, // Will be equal to dev if not provided\n        buildDir: '.vuxtra',\n        cacheDir: '.vuxtracache',\n        build: {\n            analyze: false,\n            dll: false,\n            extractCSS: false,\n            cssSourceMap: undefined,\n            ssr: undefined,\n            filenames: {\n                css: 'common.[contenthash].css',\n                manifest: 'manifest.[hash].js',\n                vendor: 'common.[chunkhash].js',\n                app: 'app.[chunkhash].js',\n                chunk: '[name].[chunkhash].js'\n            },\n            plugins: [],\n            babel: {},\n            watch: [],\n            devMiddleware: {},\n            hotMiddleware: {}\n        },\n        plugins: [],\n        watchers: {\n            webpack: {\n                ignored: /-dll/\n            },\n            chokidar: {}\n        },\n    }\n}\n\nconst Options = {}\n\nOptions.from = function (_options) {\n    const options = Object.assign({}, _options)\n\n    _.defaultsDeep(options, defaultOptions)\n\n    // let's check and make sure we set srcDir defaults\n    if (typeof options.vuxtra.srcDir === 'undefined' || options.vuxtra.srcDir === null) {\n        if (typeof options.rootDir !== 'undefined') {\n            // if vuxtra srcdir not provider we set it to root one\n            options.vuxtra.srcDir = options.rootDir\n        }\n    }\n\n    // Resolve dirs\n    const hasValue = v => typeof v === 'string' && v\n    options.vuxtra.rootDir = hasValue(options.vuxtra.rootDir) ? options.vuxtra.rootDir : (options.rootDir ? options.rootDir : process.cwd())\n    options.vuxtra.srcDir = (hasValue(options.vuxtra.srcDir) ? path.resolve(options.vuxtra.rootDir, options.vuxtra.srcDir) : options.vuxtra.rootDir)\n    options.vuxtra.modulesDir = path.resolve(options.vuxtra.rootDir, hasValue(options.vuxtra.modulesDir) ? options.vuxtra.modulesDir : 'node_modules')\n    options.vuxtra.buildDir = path.resolve(options.vuxtra.rootDir, options.vuxtra.buildDir)\n    options.vuxtra.cacheDir = path.resolve(options.vuxtra.rootDir, options.vuxtra.cacheDir)\n\n    return options\n\n}\n\nexport const defaultOptions = defaultOptionsObj\n\nexport default Options","import Debug from 'debug'\nimport fs from 'fs'\nimport _ from 'lodash'\nimport scErrors from 'sc-errors'\nimport { SocketCluster } from 'socketcluster'\nimport options from './common/options';\nimport Tapable from 'tapable'\nimport AsyncParallelHook from 'tapable/lib/AsyncParallelHook'\n\nconst TimeoutError = scErrors.TimeoutError\nconst debug = Debug('vuxtraBoot:')\ndebug.color = 5\n\n// SOCKET SERVER DEFAULT OPTIONS PROCESSING\n\n\nvar SOCKETCLUSTER_CONTROLLER_BOOT_TIMEOUT = Number(process.env.SOCKETCLUSTER_CONTROLLER_BOOT_TIMEOUT) || 10000\n\nexport const startupStatus  = {\n    init: 'INIT',\n    startDev: 'START_DEV',\n    startSocketserver: 'START_SOCKET_SERVER',\n    readySocketserver: 'READY_SOCKET_SERVER',\n    failSocketserver: 'FAIL_SOCKET_SERVER',\n    readySocketserverWorkerCluster: 'READY_SOCKET_SERVER_WORKER_CLUSTER',\n    vuxtraBuilt: 'VUXTRA_BUILT',\n    nuxtBuilt: 'NUXT_BUILT',\n    vuxtraStarted: 'VUXTRA_STARTED'\n}\n\n\nexport default class VuxtraBoot extends Tapable {\n    constructor (_options = {}) {\n        super()\n        // Apply defaults\n        this.options = options.from(_options)\n\n        this.hooks = {\n            startDev: new AsyncParallelHook([\"VuxtraBoot\"]),\n            startSocketserver: new AsyncParallelHook([\"VuxtraBoot\"]),\n            readySocketserver: new AsyncParallelHook([\"VuxtraBoot\"]),\n            failSocketserver: new AsyncParallelHook(['VuxtraBoot','data']),\n            readySocketserverWorkerCluster: new AsyncParallelHook(['VuxtraBoot']),\n            vuxtraBuilt: new AsyncParallelHook(['VuxtraBoot']),\n            nuxtBuilt: new AsyncParallelHook(['VuxtraBoot']),\n            vuxtraStarted: new AsyncParallelHook(['VuxtraBoot'])\n        };\n\n        this.startupStatus = 'INIT'\n\n        this.socketCluster = null\n\n    }\n\n    async startDev (port = 3000, host = 'localhost', nuxtDev = true) {\n        this.hooks.startDev.promise(this);\n        this.startupStatus = startupStatus.startDev\n\n        // socketcluster dev setup\n        this.options.socketcluster.environment = 'dev'\n\n        if (typeof this.options.nuxt.rootDir !== 'string') {\n            this.options.nuxt.rootDir = this.options.rootDir\n        }\n\n        // Force development mode for add hot reloading and watching changes\n        this.options.nuxt.dev = nuxtDev\n\n        // Nuxt Mode\n        this.options.nuxt.mode = 'universal'\n        this.options.port = port\n        this.options.host = host\n\n        this.startSocketCluster(port, host)\n    }\n\n\n\n    startProd (port = 3000, host = 'localhost') {\n\n    }\n\n    close() {\n        this.do\n    }\n\n    startSocketCluster (port = 3000, host= 'localhost') {\n\n        debug(`Starting: SOCKETCLUSTER on ${host}:${port}`)\n        var optionsControllerPath = process.env.SOCKETCLUSTER_OPTIONS_CONTROLLER\n        var masterControllerPath =  __dirname + '/sccMaster.js'\n        var workerControllerPath =  __dirname + '/sccWorker.js';\n        var brokerControllerPath =  __dirname + '/sccBroker.js';\n        var initControllerPath = process.env.SOCKETCLUSTER_INIT_CONTROLLER;\n        var workerClusterControllerPath = process.env.SOCKETCLUSTER_WORKERCLUSTER_CONTROLLER;\n\n        this.options.socketcluster.port = port\n        this.options.socketcluster.host = host\n\n        // kind of hackish way - attcah full config to options to be passed to worker\n        this.options.socketcluster.__full_deep_temp_options =  _.cloneDeep(this.options)\n\n        var fileExists = function (filePath, callback) {\n            fs.access(filePath, fs.constants.F_OK, (err) => {\n                callback(!err)\n            })\n        }\n\n        var runMasterController = function (socketCluster, filePath) {\n            var masterController = require(filePath)\n            masterController.run(socketCluster)\n\n        }\n\n        var launch = (startOptions) => {\n            this.socketCluster = new SocketCluster(startOptions)\n            var masterController\n\n\n            this.hooks.startSocketserver.promise(this);\n            this.startupStatus = startupStatus.startSocketserver\n\n            this.socketCluster.on('ready',  (workerClusterInfo) => {\n                this.hooks.readySocketserver.promise(this)\n                this.startupStatus = startupStatus.readySocketserver\n            })\n\n            this.socketCluster.on('workerClusterReady',  (workerClusterInfo) => {\n                this.hooks.readySocketserverWorkerCluster.promise(this)\n                this.startupStatus = startupStatus.readySocketserverWorkerCluster\n            })\n\n            this.socketCluster.on('fail',  (workerClusterInfo) => {\n                this.hooks.failSocketserver.promise(this)\n                this.startupStatus = startupStatus.failSocketserver\n            })\n\n            this.socketCluster.on('workerMessage',  (id, data) => {\n                if (typeof data.type !== 'undefined') {\n                    if (data.type === 'event') {\n                        switch(data.subtype) {\n                            case 'vuxtraBuilt':\n                                this.hooks.vuxtraBuilt.promise(this)\n                                this.startupStatus = startupStatus.vuxtraBuilt\n                                break;\n                            case 'nuxtBuilt':\n                                this.hooks.nuxtBuilt.promise(this)\n                                this.startupStatus = startupStatus.nuxtBuilt\n                                break;\n                            case 'vuxtraStarted':\n                                this.hooks.vuxtraStarted.promise(this)\n                                this.startupStatus = startupStatus.vuxtraStarted\n                                break;\n                        }\n                    } else if (data.type === 'error') {\n                        this.hooks.failSocketserver.promise(this, data)\n                        this.startupStatus = startupStatus.failSocketserver\n                    }\n                }\n            })\n\n            if (masterControllerPath) {\n                runMasterController(this.socketCluster, masterControllerPath)\n            } else {\n                var defaultMasterControllerPath =  './sccMaster.js'\n                fileExists(defaultMasterControllerPath, (exists) => {\n                    if (exists) {\n                        runMasterController(this.socketCluster, defaultMasterControllerPath)\n                    }\n                })\n            }\n        }\n\n        var start =  () => {\n            if (optionsControllerPath) {\n                var optionsController = require(optionsControllerPath)\n                optionsController.run(this.options.socketcluster, launch)\n            } else {\n                launch(this.options.socketcluster)\n            }\n        }\n\n        var bootCheckInterval = Number(process.env.SOCKETCLUSTER_BOOT_CHECK_INTERVAL) || 200\n        var bootStartTime = Date.now()\n\n// Detect when Docker volumes are ready.\n        var startWhenFileIsReady = (filePath) => {\n            return new Promise((resolve, reject) => {\n                if (!filePath) {\n                    resolve()\n                    return\n                }\n                var checkIsReady = () => {\n                    var now = Date.now()\n\n                    fileExists(filePath, (exists) => {\n                        if (exists) {\n                            resolve()\n                        } else {\n                            if (now - bootStartTime >= SOCKETCLUSTER_CONTROLLER_BOOT_TIMEOUT) {\n                                var errorMessage = `Could not locate a controller file at path ${filePath} ` +\n                                    `before SOCKETCLUSTER_CONTROLLER_BOOT_TIMEOUT`\n                                var volumeBootTimeoutError = new TimeoutError(errorMessage)\n                                reject(volumeBootTimeoutError)\n                            } else {\n                                setTimeout(checkIsReady, bootCheckInterval)\n                            }\n                        }\n                    })\n                }\n                checkIsReady()\n            })\n        }\n\n        var filesReadyPromises = [\n            startWhenFileIsReady(optionsControllerPath),\n            startWhenFileIsReady(masterControllerPath),\n            startWhenFileIsReady(workerControllerPath),\n            startWhenFileIsReady(brokerControllerPath),\n            startWhenFileIsReady(initControllerPath),\n            startWhenFileIsReady(workerClusterControllerPath)\n        ]\n        Promise.all(filesReadyPromises)\n            .then(() => {\n                start()\n            })\n            .catch((err) => {\n                console.error(err.stack)\n                process.exit(1)\n            })\n\n\n    }\n\n}"],"names":["defaultOptionsObj","Number","process","env","SOCKETCLUSTER_WORKERS","SOCKETCLUSTER_BROKERS","SOCKETCLUSTER_PORT","SOCKETCLUSTER_WS_ENGINE","SOCKETCLUSTER_APP_NAME","__dirname","SOCKETCLUSTER_INIT_CONTROLLER","SOCKETCLUSTER_WORKERCLUSTER_CONTROLLER","SOCKETCLUSTER_SOCKET_CHANNEL_LIMIT","SCC_STATE_SERVER_HOST","SCC_STATE_SERVER_PORT","SCC_AUTH_KEY","SCC_INSTANCE_IP","SCC_INSTANCE_IP_FAMILY","SCC_STATE_SERVER_CONNECT_TIMEOUT","SCC_STATE_SERVER_ACK_TIMEOUT","SCC_STATE_SERVER_RECONNECT_RANDOMNESS","ENV","NODE_ENV","undefined","Options","from","_options","options","Object","assign","defaultsDeep","defaultOptions","vuxtra","srcDir","rootDir","hasValue","v","cwd","path","resolve","modulesDir","buildDir","cacheDir","TimeoutError","scErrors","debug","Debug","color","SOCKETCLUSTER_CONTROLLER_BOOT_TIMEOUT","startupStatus","VuxtraBoot","Tapable","hooks","AsyncParallelHook","socketCluster","port","host","nuxtDev","startDev","promise","socketcluster","environment","nuxt","dev","mode","startSocketCluster","do","optionsControllerPath","SOCKETCLUSTER_OPTIONS_CONTROLLER","masterControllerPath","workerControllerPath","brokerControllerPath","initControllerPath","workerClusterControllerPath","__full_deep_temp_options","_","cloneDeep","fileExists","filePath","callback","access","fs","constants","F_OK","err","runMasterController","masterController","require","run","launch","startOptions","SocketCluster","startSocketserver","on","workerClusterInfo","readySocketserver","readySocketserverWorkerCluster","failSocketserver","id","data","type","subtype","vuxtraBuilt","nuxtBuilt","vuxtraStarted","defaultMasterControllerPath","exists","start","optionsController","bootCheckInterval","SOCKETCLUSTER_BOOT_CHECK_INTERVAL","bootStartTime","Date","now","startWhenFileIsReady","Promise","reject","checkIsReady","errorMessage","volumeBootTimeoutError","filesReadyPromises","all","then","catch","error","stack","exit"],"mappings":"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"}