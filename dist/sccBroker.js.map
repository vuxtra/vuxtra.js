{"version":3,"file":"sccBroker.js","sources":["../lib/socketserver/sccBroker.js"],"sourcesContent":["import scClusterBrokerClient from 'scc-broker-client'\nimport Debug from 'debug'\n\nconst debug = Debug('scc-broker:')\ndebug.color = 5\n\nmodule.exports.run = function (broker) {\n    debug('   >> Broker PID:', process.pid)\n\n    // This is defined in server.js (taken from environment variable SC_CLUSTER_STATE_SERVER_HOST).\n    // If this property is defined, the broker will try to attach itself to the SC cluster for\n    // automatic horizontal scalability.\n    // This is mostly intended for the Kubernetes deployment of SocketCluster - In this case,\n    // The clustering/sharding all happens automatically.\n\n    if (broker.options.clusterStateServerHost) {\n        scClusterBrokerClient.attach(broker, {\n            stateServerHost: broker.options.clusterStateServerHost,\n            stateServerPort: broker.options.clusterStateServerPort,\n            authKey: broker.options.clusterAuthKey,\n            stateServerConnectTimeout: broker.options.clusterStateServerConnectTimeout,\n            stateServerAckTimeout: broker.options.clusterStateServerAckTimeout,\n            stateServerReconnectRandomness: broker.options.clusterStateServerReconnectRandomness\n        })\n    }\n}\n"],"names":["debug","Debug","color","module","exports","run","broker","process","pid","options","clusterStateServerHost","attach","clusterStateServerPort","clusterAuthKey","clusterStateServerConnectTimeout","clusterStateServerAckTimeout","clusterStateServerReconnectRandomness"],"mappings":";;;;;;;;;;;;AAGA,MAAMA,QAAQC,MAAM,aAAN,CAAd;AACAD,MAAME,KAAN,GAAc,CAAd;;AAEAC,OAAOC,OAAP,CAAeC,GAAf,GAAqB,UAAUC,MAAV,EAAkB;UAC7B,mBAAN,EAA2BC,QAAQC,GAAnC;;;;;;;;QAQIF,OAAOG,OAAP,CAAeC,sBAAnB,EAA2C;8BACjBC,MAAtB,CAA6BL,MAA7B,EAAqC;6BAChBA,OAAOG,OAAP,CAAeC,sBADC;6BAEhBJ,OAAOG,OAAP,CAAeG,sBAFC;qBAGxBN,OAAOG,OAAP,CAAeI,cAHS;uCAINP,OAAOG,OAAP,CAAeK,gCAJT;mCAKVR,OAAOG,OAAP,CAAeM,4BALL;4CAMDT,OAAOG,OAAP,CAAeO;SANnD;;CAVR"}